diff --git a/devtools/client/webconsole/test/browser/browser_webconsole_context_menu_open_url.js b/devtools/client/webconsole/test/browser/browser_webconsole_context_menu_open_url.js
index 44fb496e76..ec165ee572 100644
--- a/devtools/client/webconsole/test/browser/browser_webconsole_context_menu_open_url.js
+++ b/devtools/client/webconsole/test/browser/browser_webconsole_context_menu_open_url.js
@@ -1,14 +1,15 @@
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
-// Test that the Open URL in new Tab menu item is displayed for network logs and works as
-// expected.
+// Test that the Open URL in new Tab menu item is displayed for links in text messages
+// and network logs and that they work as expected.
 
 "use strict";
 
 const TEST_URI =
   "http://example.com/browser/devtools/client/webconsole/" +
   "test/browser/test-console.html";
+const TEST_URI2 = "http://example.com/";
 
 add_task(async function() {
   // Enable net messages in the console for this test.
@@ -30,8 +31,33 @@ add_task(async function() {
   let menuPopup = await openContextMenu(hud, message);
   let openUrlItem = menuPopup.querySelector("#console-menu-open-url");
   ok(!openUrlItem, "Open URL menu item is not available");
-
   await hideContextMenu(hud);
+
+  info("Test Open URL menu item for a text message containing a link");
+  await ContentTask.spawn(gBrowser.selectedBrowser, TEST_URI2, url => {
+    content.wrappedJSObject.console.log("Visit ", url);
+  });
+
+  info("Open context menu for the link");
+  message = await waitFor(() => findMessage(hud, TEST_URI2));
+  let urlNode = message.querySelector("a.url");
+  menuPopup= await openContextMenu(hud, urlNode);
+  openUrlItem = menuPopup.querySelector("#console-menu-open-url");
+  ok(openUrlItem, "Open URL menu item is available");
+
+  info("Click on Open URL menu item and wait for new tab to open");
+  let currentTab = gBrowser.selectedTab;
+  let onTabLoaded = BrowserTestUtils.waitForNewTab(gBrowser, TEST_URI2, true);
+  openUrlItem.click();
+  let newTab = await onTabLoaded;
+  ok(newTab, "The expected tab was opened.");
+  is(
+    newTab._tPos,
+    currentTab._tPos + 1,
+    "The new tab was opened in the position to the right of the current tab"
+  );
+  is(gBrowser.selectedTab, currentTab, "The tab was opened in the background");
+
   hud.ui.clearOutput();
 
   info("Test Open URL menu item for network log");
@@ -48,12 +74,12 @@ add_task(async function() {
   openUrlItem = menuPopup.querySelector("#console-menu-open-url");
   ok(openUrlItem, "Open URL menu item is available");
 
-  const currentTab = gBrowser.selectedTab;
+  currentTab = gBrowser.selectedTab;
   const tabLoaded = listenToTabLoad();
   info("Click on Open URL menu item and wait for new tab to open");
   openUrlItem.click();
   await hideContextMenu(hud);
-  const newTab = await tabLoaded;
+  newTab = await tabLoaded;
   const newTabHref = newTab.linkedBrowser.currentURI.spec;
   is(newTabHref, TEST_URI, "Tab was opened with the expected URL");
 
diff --git a/devtools/client/webconsole/utils/context-menu.js b/devtools/client/webconsole/utils/context-menu.js
index 5a4b236b41..4c8672efb0 100644
--- a/devtools/client/webconsole/utils/context-menu.js
+++ b/devtools/client/webconsole/utils/context-menu.js
@@ -269,6 +269,15 @@ function createContextMenu(event, message, webConsoleWrapper) {
   }
 
   if (url) {
+    menu.append(new MenuItem({
+      id: "console-menu-open-url",
+      label: l10n.getStr("webconsole.menu.openURL.label"),
+      accesskey: l10n.getStr("webconsole.menu.openURL.accesskey"),
+      click: () => openContentLink(url, {
+        inBackground: true,
+        relatedToCurrent: true,
+      }),
+    }));
     menu.append(
       new MenuItem({
         id: "console-menu-copy-url",
